# Safarnak App - Cursor AI Configuration

## Project Overview

You are working on **Safarnak**, a full-stack offline-first travel application. This is a **unified single-root monorepo** where both client and server code coexist in the same directory structure.

### Key Architecture Points
- **Client**: Expo React Native app (iOS/Android/Web)
- **Worker**: Cloudflare Worker backend (`worker/index.ts` at root)
- **Resolvers**: GraphQL resolvers in `worker/` folder (server-side only)
- **Shared**: GraphQL schema (`graphql/`) and database schema (`drizzle/`) shared between client & worker
- **No Workspaces**: This is NOT a Yarn workspace - it's a single package.json project

## Technology Stack

### Frontend (Client)
- **Expo** ~54.0.19 - React Native framework with file-based routing
- **React Native** 0.81.5 - Mobile framework
- **React** 19.1.0 - UI library
- **Expo Router** ~6.0.13 - File-based navigation
- **Redux Toolkit** ^2.9.2 - State management
- **Redux Persist** ^6.0.0 - Persistent state
- **Apollo Client** 3.8.0 - GraphQL client
- **react-i18next** ^16.1.5 - Internationalization (English + Persian/Farsi)
- **Drizzle ORM** ^0.44.6 - Type-safe database queries (client-side SQLite)

### Backend (Worker)
- **Cloudflare Workers** - Serverless edge runtime
- **GraphQL Yoga** ^5.16.0 - GraphQL server
- **Cloudflare D1** - Serverless SQLite database
- **Drizzle ORM** ^0.44.6 - Type-safe ORM
- **graphql-workers-subscriptions** ^0.1.6 - Real-time subscriptions with Durable Objects

### Code Generation
- **GraphQL Codegen** ^6.0.1 - Auto-generate TypeScript types and React Apollo hooks
- **typescript-operations** ^5.0.2 - Generate operation-specific types
- **typescript-react-apollo** ^4.3.3 - Generate React Apollo hooks

### Shared
- **TypeScript** ~5.9.3 - Balanced configuration prioritizing development efficiency
- **GraphQL** ^16.11.0 - Schema and type definitions
- **ESLint** ^9.38.0 - Developer-friendly config with TypeScript/React/React Native plugins
- **Prettier** ^3.6.2 - Code formatting

## Project Structure

```
safarnak.app/                           # Single root directory
â”œâ”€â”€ worker.ts                           # Cloudflare Worker entry (3-line imports from resolvers & graphql)
â”œâ”€â”€ worker/                             # GraphQL resolvers (SERVER-SIDE ONLY)
â”‚   â”œâ”€â”€ index.ts                        # Combined resolver exports
â”‚   â”œâ”€â”€ types.ts                        # Server-specific types
â”‚   â”œâ”€â”€ queries/                        # Query resolvers: getMessages, me
â”‚   â”œâ”€â”€ mutations/                      # Mutation resolvers: register, login, addMessage
â”‚   â”œâ”€â”€ subscriptions/                  # Subscription resolvers: newMessages
â”‚   â””â”€â”€ utilities/                       # Password hashing (PBKDF2), token generation
â”œâ”€â”€ graphql/                            # SHARED between client & worker
â”‚   â”œâ”€â”€ schema.graphql                  # Pure GraphQL schema definition
â”‚   â”œâ”€â”€ queries/                        # Query definitions (.graphql files)
â”‚   â”‚   â”œâ”€â”€ addMessage.graphql
â”‚   â”‚   â”œâ”€â”€ getMessages.graphql
â”‚   â”‚   â”œâ”€â”€ login.graphql
â”‚   â”‚   â”œâ”€â”€ me.graphql
â”‚   â”‚   â””â”€â”€ register.graphql
â”‚   â”œâ”€â”€ generated/
â”‚   â”‚   â””â”€â”€ schema.d.ts                 # Worker schema declarations
â”‚   â”œâ”€â”€ schema-loader.ts                # Worker schema loader
â”‚   â””â”€â”€ index.ts                         # Shared exports only
â”œâ”€â”€ api/                                # Client API layer (CLIENT-SIDE ONLY)
â”‚   â”œâ”€â”€ client.ts                       # Apollo Client setup with auth link
â”‚   â”œâ”€â”€ hooks.ts                        # ðŸ¤– Auto-generated React Apollo hooks
â”‚   â”œâ”€â”€ types.ts                        # ðŸ¤– Auto-generated GraphQL types
â”‚   â”œâ”€â”€ api-types.ts                    # API-specific types (ApiError, ApiResponse)
â”‚   â”œâ”€â”€ index.ts                        # Main API exports
â”‚   â”œâ”€â”€ mutations/                      # Client mutation wrappers
â”‚   â”‚   â”œâ”€â”€ addMessage.ts
â”‚   â”‚   â”œâ”€â”€ login.ts
â”‚   â”‚   â”œâ”€â”€ register.ts
â”‚   â”‚   â””â”€â”€ index.ts
â”‚   â”œâ”€â”€ queries/                         # Client query wrappers
â”‚   â”‚   â”œâ”€â”€ getMessages.ts
â”‚   â”‚   â”œâ”€â”€ me.ts
â”‚   â”‚   â””â”€â”€ index.ts
â”‚   â”œâ”€â”€ subscriptions/                  # Client subscription wrappers
â”‚   â”‚   â”œâ”€â”€ newMessages.ts
â”‚   â”‚   â””â”€â”€ index.ts
â”‚   â””â”€â”€ utilities/                       # Client helper functions
â”‚       â”œâ”€â”€ utils.ts
â”‚       â””â”€â”€ index.ts
â”œâ”€â”€ drizzle/                            # Database layer (SHARED)
â”‚   â”œâ”€â”€ schema.ts                       # Database schema: users, tours, messages, subscriptions
â”‚   â””â”€â”€ migrations/                     # SQL migration files
â”œâ”€â”€ store/                              # Redux state management (CLIENT)
â”‚   â”œâ”€â”€ index.ts                        # Store configuration with persist
â”‚   â”œâ”€â”€ hooks.ts                        # Typed useAppDispatch, useAppSelector
â”‚   â”œâ”€â”€ slices/                         # Redux slices
â”‚   â”‚   â”œâ”€â”€ authSlice.ts                # Auth state (user, token, isAuthenticated)
â”‚   â”‚   â””â”€â”€ themeSlice.ts               # Theme state
â”‚   â””â”€â”€ middleware/                      # Redux middleware
â”‚       â””â”€â”€ offlineMiddleware.ts        # Offline mutation queue
â”œâ”€â”€ app/                                # Expo Router pages (CLIENT)
â”‚   â”œâ”€â”€ _layout.tsx                     # Root layout with providers
â”‚   â”œâ”€â”€ login.tsx                       # Login/register screen
â”‚   â””â”€â”€ (tabs)/                         # Tab navigation group
â”‚       â”œâ”€â”€ _layout.tsx                 # Tab layout
â”‚       â”œâ”€â”€ index.tsx                   # Home screen with MapView
â”‚       â”œâ”€â”€ tour.tsx                    # Tours listing
â”‚       â””â”€â”€ profile.tsx                 # User profile with logout
â”œâ”€â”€ components/                         # React components (CLIENT)
â”‚   â”œâ”€â”€ AuthWrapper.tsx                 # Authentication guard component
â”‚   â”œâ”€â”€ MapView.tsx                     # Interactive Leaflet map (WebView-based)
â”‚   â”œâ”€â”€ context/                        # React contexts
â”‚   â”‚   â”œâ”€â”€ LanguageContext.tsx         # i18n language switching
â”‚   â”‚   â”œâ”€â”€ LanguageSwitcher.tsx       # Language selector UI
â”‚   â”‚   â””â”€â”€ ThemeContext.tsx           # Dark/light theme
â”‚   â””â”€â”€ ui/                             # Themed UI components
â”‚       â”œâ”€â”€ Themed.tsx                  # Theme-aware View/Text
â”‚       â”œâ”€â”€ ThemeToggle.tsx             # Dark mode toggle
â”‚       â”œâ”€â”€ CustomText.tsx              # i18n-aware text component
â”‚       â””â”€â”€ ...                         # Other UI components
â”œâ”€â”€ constants/                          # App constants (CLIENT)
â”‚   â”œâ”€â”€ app.ts                          # App configuration
â”‚   â”œâ”€â”€ Colors.ts                       # Theme colors
â”‚   â””â”€â”€ index.ts                        # Constants exports
â”œâ”€â”€ hooks/                              # Custom React hooks (CLIENT)
â”œâ”€â”€ locales/                            # i18n translations
â”‚   â”œâ”€â”€ en/translation.json             # English
â”‚   â””â”€â”€ fa/translation.json             # Persian (Farsi)
â”œâ”€â”€ assets/                             # Static assets (images, fonts)
â”œâ”€â”€ metro.config.js                     # Metro bundler config
â”œâ”€â”€ wrangler.toml                       # Cloudflare Workers config
â”œâ”€â”€ drizzle.config.ts                   # Drizzle ORM config
â”œâ”€â”€ codegen.yml                         # GraphQL Codegen configuration
â”œâ”€â”€ eslint.config.mjs                   # ESLint flat config (ES module)
â”œâ”€â”€ app.config.js                       # Expo configuration
â”œâ”€â”€ tsconfig.json                       # TypeScript config with enhanced checking
â””â”€â”€ package.json                        # Single package.json (no workspaces)
```

## Path Aliases (TypeScript & Metro)

```typescript
"@/*"           â†’ "./*"              // Root files
"@components/*" â†’ "./components/*"   // UI components
"@graphql/*"    â†’ "./graphql/*"      // Shared GraphQL definitions
```

## Key Patterns & Best Practices

### 1. GraphQL Architecture

**Shared (graphql/):**
- `schema.graphql` - Pure GraphQL schema definition (shared)
- `queries/*.graphql` - Query/mutation definitions (shared)
- `schema-loader.ts` - Worker schema loader
- `generated/schema.d.ts` - Worker schema declarations

**Client-Side (api/):**
- `hooks.ts` - Auto-generated React Apollo hooks
- `types.ts` - Auto-generated GraphQL types
- `api-types.ts` - API-specific types (ApiError, ApiResponse)
- `mutations/` - Client mutation wrappers
- `queries/` - Client query wrappers
- `subscriptions/` - Client subscription wrappers

**Server-Side (worker/):**
- `queries/` - Query resolver functions (getMessages, me)
- `mutations/` - Mutation resolver functions (register, login, addMessage)
- `subscriptions/` - Subscription resolvers (newMessages)
- `utilities/` - Password hashing, token generation

**Worker (worker/index.ts):**
```typescript
import { readGraphQLSchema } from '@graphql/schema-loader';
import { resolvers } from './worker';
// Minimal file that wires everything together
```

**Codegen Workflow:**
1. Define schema in `graphql/schema.graphql`
2. Define operations in `graphql/queries/*.graphql`
3. Run `yarn codegen` to generate types and hooks in `api/`
4. Use generated hooks in client components

### 2. Database Patterns

**Schema (drizzle/schema.ts):**
- Define tables: users, tours, messages, subscriptions
- Use Drizzle ORM helpers: `integer()`, `text()`, `sqliteTable()`
- Export tables: `export const users = sqliteTable(...)`

**Resolvers:**
```typescript
import { drizzle } from 'drizzle-orm/d1';
import { users } from '../drizzle/schema';

const db = drizzle(context.env.DB);
const user = await db.select().from(users).where(eq(users.id, id)).get();
```

**Migrations:**
- Generate: `yarn db:generate`
- Apply: `yarn db:migrate`
- Never edit migrations manually

### 3. Authentication

**Password Hashing (worker/utils.ts):**
- PBKDF2 with 100,000 iterations
- SHA-256 hash function
- 16-byte salt stored with hash

**Token Generation:**
- SHA-256 hash of `userId + username + timestamp`
- Stored in Redux + AsyncStorage on client

**Auth Flow:**
1. Client calls `register` or `login` mutation
2. Worker hashes password, generates token
3. Client stores token in Redux (persisted)
4. Apollo Client adds token to headers via `authLink`

### 4. Offline-First Strategy

**Client-Side:**
- Redux Persist - State survives app restarts
- AsyncStorage - User data cached locally
- Offline Middleware - Queue mutations when offline
- NetInfo - Detect connection status

**Sync Strategy:**
- Queue failed mutations
- Retry when connection restored
- Optimistic UI updates

### 5. Component Patterns

**Functional Components:**
```typescript
interface Props {
  title: string;
  onPress: () => void;
}

export default function MyComponent({ title, onPress }: Props) {
  // Use hooks
  const { t } = useTranslation();
  
  // Use callbacks for performance
  const handlePress = useCallback(() => {
    onPress();
  }, [onPress]);
  
  return <View>...</View>;
}
```

**Context Usage:**
```typescript
// Provide at root (_layout.tsx)
<LanguageProvider>
  <ThemeProvider>
    <Stack />
  </ThemeProvider>
</LanguageProvider>

// Consume anywhere
const { currentLanguage, changeLanguage } = useLanguage();
```

### 6. TypeScript Standards

**Always type:**
- Function parameters
- Return values
- Component props
- Redux state/actions

**Development-Friendly Approach:**
- `any` type is allowed for development flexibility
- `@ts-ignore` and `@ts-expect-error` are allowed when needed
- Type assertions are acceptable for development
- Focus on functionality over strict typing

**Use:**
- Interfaces for objects
- Type aliases for unions/primitives
- Generics for reusable components/functions
- `@ts-expect-error` with explanatory comments

### 7. Imports

**Good:**
```typescript
import { View } from '@components/ui/Themed';
import { LOGIN_MUTATION } from '@graphql/queries';
import { drizzle } from 'drizzle-orm/d1';
```

**Bad:**
```typescript
import { View } from '../../../components/ui/Themed';  // Use path alias
import { LOGIN_MUTATION } from './graphql/queries';     // Use path alias
```

### 8. Error Handling

**GraphQL Resolvers:**
```typescript
export const register = async (_, { username, password }, context) => {
  // Validate input
  if (!username || !password) {
    throw new Error('Username and password are required');
  }
  
  // Check existing
  const existing = await db.select()...;
  if (existing) {
    throw new Error('User already exists');
  }
  
  // Perform operation
  // ...
};
```

**Client Components:**
```typescript
const [mutate, { loading, error }] = useMutation(REGISTER_MUTATION);

if (error) return <ErrorDisplay error={error} />;
if (loading) return <LoadingSpinner />;
```

## Common Commands

```bash
# Development
yarn dev                  # Start both worker and client
yarn start                # Expo dev server only
yarn worker:dev           # Worker only

# GraphQL Codegen
yarn codegen              # Generate types and hooks from GraphQL schema
yarn codegen:watch        # Watch mode for development

# Database
yarn db:generate          # Generate migration from schema
yarn db:migrate           # Apply migrations to local D1
yarn db:studio            # Open Drizzle Studio

# Code Quality
yarn lint                 # Run ESLint with developer-friendly rules
yarn lint:fix             # Fix linting issues automatically
yarn format               # Format with Prettier (optional)

# Build
yarn android              # Run on Android
yarn ios                  # Run on iOS
yarn build:release        # EAS build for production

# Utilities
yarn clean                # Clear all caches
```

## File Naming Conventions

- Components: `PascalCase.tsx` (e.g., `AuthWrapper.tsx`)
- Hooks: `camelCase.ts` starting with 'use' (e.g., `useAuth.ts`)
- Utilities: `camelCase.ts` (e.g., `formatDate.ts`)
- Constants: `SCREAMING_SNAKE_CASE` inside files
- Types: Use descriptive interfaces (e.g., `interface UserProps`)

## Internationalization

**Using translations:**
```typescript
import { useTranslation } from 'react-i18next';

const { t } = useTranslation();
<Text>{t('common.welcome')}</Text>
```

**Translation files:**
- `locales/en/translation.json`
- `locales/fa/translation.json`

**RTL Support:**
- Automatically detected from language
- Use `I18nManager` for manual control

## Key Configuration Files

**metro.config.js** - Metro bundler (CommonJS)
- Defines path aliases
- Adds .sql file support
- Configures resolver

**eslint.config.mjs** - ESLint flat config (ES Module)
- TypeScript rules
- React/React Native rules
- Prettier integration
- **Must use .mjs extension** (package.json doesn't have "type": "module")

**wrangler.toml** - Cloudflare Workers
- D1 database binding
- Durable Objects for subscriptions
- Worker entry point: `worker/index.ts`

**drizzle.config.ts** - Database
- Schema location: `drizzle/schema.ts`
- Migrations: `drizzle/migrations/`
- Dialect: SQLite

## Critical Rules

1. **Never add `"type": "module"` to package.json** - causes metro.config.js to fail
2. **Use eslint.config.mjs** - ES module config works without "type": "module"
3. **Perfect Separation**: GraphQL folder is shared, API folder is client-only, Worker folder is server-only
4. **GraphQL Codegen**: Always run `yarn codegen` after modifying schema or operations
5. **Worker code is server-only** - Never import from client code
6. **Use path aliases** - Avoid relative imports
7. **Run db:migrate before testing** - Ensure schema is up to date
8. **Clean caches when stuck** - `yarn clean` fixes most issues
9. **Developer-Friendly TypeScript**: Use `any` type and `@ts-expect-error` when needed for development
10. **Auto-Generated Files**: Never manually edit `api/hooks.ts` or `api/types.ts`

## Debugging Tips

**Metro bundler issues:**
- Run `yarn clean`
- Delete `.expo` and `node_modules/.cache`
- Restart with `yarn start --clear`

**Worker issues:**
- Check `.wrangler/state/v3/d1/` for database
- Run `yarn db:migrate` to reset database
- Check wrangler logs in terminal

**Type errors:**
- Ensure shared types are in `graphql/schema.graphql`
- Check tsconfig.json path aliases
- Run `npx tsc --noEmit` to see all errors
- Run `yarn codegen` to regenerate types

**GraphQL errors:**
- Check worker terminal for resolver errors
- Verify schema matches resolvers
- Test in GraphiQL at `http://localhost:8787/graphql`
- Run `yarn codegen` after schema changes

**API/Client errors:**
- Check if `api/hooks.ts` and `api/types.ts` are up to date
- Run `yarn codegen` to regenerate client code
- Verify imports are using correct paths

## Security Considerations

- **Passwords**: PBKDF2 with 100k iterations (see `worker/utils.ts`)
- **Tokens**: SHA-256 based, include timestamp
- **Validation**: Always validate input in resolvers
- **SQL Injection**: Drizzle ORM prevents this automatically
- **XSS**: React Native escapes by default

## Performance Tips

- Use `React.memo` for expensive components
- Use `useCallback` for functions passed as props
- Use `useMemo` for expensive calculations
- Keep Redux state minimal
- Use Apollo Client cache effectively

## When in Doubt

1. Check existing patterns in similar files
2. Use path aliases (`@/`, `@components/`, `@graphql/`)
3. Type everything strictly with enhanced checking
4. Run linter before committing
5. Test both online and offline scenarios
6. Ensure RTL layout works for Persian
7. Run `yarn codegen` after GraphQL changes
8. Never manually edit auto-generated files

## Feature Development Workflow

### Adding New GraphQL Operations

1. **Define Schema**: Add types to `graphql/schema.graphql`
2. **Create Operations**: Add `.graphql` files to `graphql/queries/`
3. **Generate Code**: Run `yarn codegen`
4. **Create Resolvers**: Add resolver functions to `worker/mutations/` or `worker/queries/`
5. **Create Client Wrappers**: Add wrapper files to `api/mutations/` or `api/queries/`
6. **Use in Components**: Import generated hooks in React components

### Adding New Database Tables

1. **Update Schema**: Add table to `drizzle/schema.ts`
2. **Generate Migration**: Run `yarn db:generate`
3. **Apply Migration**: Run `yarn db:migrate`
4. **Update Types**: Run `yarn codegen` if GraphQL schema changed

### Adding New UI Components

1. **Create Component**: Add to `components/ui/` or `components/`
2. **Add Types**: Define TypeScript interfaces
3. **Add Translations**: Update `locales/en/` and `locales/fa/`
4. **Test RTL**: Ensure Persian layout works correctly

---

**Remember**: This is a unified monorepo with perfect separation. GraphQL folder is shared, API folder is client-only, Worker folder is server-only. Always run `yarn codegen` after GraphQL changes and never manually edit auto-generated files.