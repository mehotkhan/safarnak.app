name: Build and Deploy

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  release:
    types: [published]

env:
  NODE_VERSION: '20'
  YARN_VERSION: '1.22.22'

jobs:
  # Build Android APK
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            client/node_modules
            worker/node_modules
            ~/.cache/yarn
            ~/.gradle/caches
            ~/.android
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Expo CLI
        run: |
          npm install -g @expo/cli@latest

      - name: Install Expo dependencies
        run: |
          cd client
          expo install --fix

      - name: Generate Android project
        run: |
          cd client
          expo prebuild --platform android --clean

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            client/android/.gradle
            client/android/app/build
          key: ${{ runner.os }}-gradle-${{ hashFiles('client/android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Android APK
        run: |
          cd client/android
          ./gradlew assembleRelease
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}

      - name: Upload APK to GitHub Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./client/android/app/build/outputs/apk/release/app-release.apk
          asset_name: safarnak-android-${{ github.event.release.tag_name }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload APK as Artifact
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: client/android/app/build/outputs/apk/release/app-release.apk
          retention-days: 30

  # Build summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-android]
    if: always() && (github.event_name == 'release' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Android Build | ${{ needs.build-android.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-android.result }}" = "success" ]; then
            echo "✅ Android build completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Android build failed. Check the logs above." >> $GITHUB_STEP_SUMMARY
          fi
