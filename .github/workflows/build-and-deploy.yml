name: Build and Deploy

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  release:
    types: [published]

env:
  NODE_VERSION: '20'
  YARN_VERSION: '1.22.22'

jobs:
  # Build Android APK
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            client/node_modules
            worker/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup Expo CLI
        run: |
          npm install -g @expo/cli@latest
          expo install --fix

      - name: Setup EAS CLI
        run: |
          npm install -g eas-cli@latest
          echo "EAS CLI installed successfully"

      - name: Configure EAS
        run: |
          eas login --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Build Android APK
        run: |
          cd client
          eas build --platform android --profile preview --non-interactive --no-wait
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Wait for build completion
        run: |
          cd client
          eas build:list --platform android --limit 1 --json > build-info.json
          BUILD_ID=$(cat build-info.json | jq -r '.[0].id')
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          
          # Wait for build to complete
          while true; do
            eas build:view $BUILD_ID --json > build-status.json
            STATUS=$(cat build-status.json | jq -r '.status')
            echo "Build status: $STATUS"
            
            if [ "$STATUS" = "finished" ]; then
              break
            elif [ "$STATUS" = "errored" ] || [ "$STATUS" = "canceled" ]; then
              echo "Build failed with status: $STATUS"
              exit 1
            fi
            
            sleep 30
          done

      - name: Download APK
        run: |
          cd client
          eas build:download $BUILD_ID --output ./build.apk

      - name: Upload APK to GitHub Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./client/build.apk
          asset_name: safarnak-android-${{ github.event.release.tag_name }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload APK as Artifact
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: client/build.apk
          retention-days: 30

  # Deploy Cloudflare Worker
  deploy-worker:
    name: Deploy Cloudflare Worker
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            worker/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-worker-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-worker-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup Wrangler CLI
        run: |
          cd worker
          npm install -g wrangler@latest

      - name: Configure Cloudflare
        run: |
          cd worker
          wrangler auth login --api-token
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Run database migrations
        run: |
          cd worker
          yarn db:migrate:prod
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Deploy Worker
        run: |
          cd worker
          wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  # Run tests (optional)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            client/node_modules
            worker/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-test-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-test-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run TypeScript checks
        run: |
          cd client && yarn tsc --noEmit
          cd ../worker && yarn tsc --noEmit

      - name: Run linting (if available)
        run: |
          # Add linting commands here when available
          echo "Linting checks would go here"

  # Build summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-android, deploy-worker]
    if: always() && (github.event_name == 'release' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Android Build | ${{ needs.build-android.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Worker Deploy | ${{ needs.deploy-worker.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-android.result }}" = "success" ] && [ "${{ needs.deploy-worker.result }}" = "success" ]; then
            echo "✅ All builds completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some builds failed. Check the logs above." >> $GITHUB_STEP_SUMMARY
          fi
