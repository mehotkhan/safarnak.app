name: Build Android APK

on:
  push:
    branches: [master, main]
    paths:
      - 'app/**'
      - 'components/**'
      - 'android/**'
      - 'package.json'
      - 'yarn.lock'
      - '.github/workflows/build-and-deploy.yml'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  GRADLE_OPTS: '-Dorg.gradle.daemon=true -Dorg.gradle.workers.max=4 -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Dorg.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dkotlin.compiler.execution.strategy=in-process'
  NODE_ENV: 'production'
  # Environment variables for the app
  GRAPHQL_URL: 'https://safarnak.mohet.ir/graphql'
  APP_NAME: 'ÿ≥ŸÅÿ±ŸÜÿß⁄©'
  APP_SCHEME: 'safarnak'
  BUNDLE_IDENTIFIER: 'ir.mohet.safarnak'

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    timeout-minutes: 60
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false  # Don't cancel running builds, let them complete
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to properly detect commit messages

      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile --prefer-offline --no-progress --network-timeout 100000
          echo "Dependencies installed successfully"

      - name: Verify required API files exist
        run: |
          echo "Verifying required API files for Android build..."
          if [ ! -f "api/types.ts" ] || [ ! -f "api/hooks.ts" ]; then
            echo "‚ùå Error: Required API files (api/types.ts, api/hooks.ts) are missing!"
            echo "Please run 'yarn codegen' locally and commit the generated files."
            exit 1
          fi
          echo "‚úÖ Required API files found"

      - name: Determine semantic version bump
        id: version_bump
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
        run: |
          node <<'NODE'
          const fs = require('fs');
          const cp = require('child_process');
          const pkg = JSON.parse(fs.readFileSync('package.json','utf8'));
          const current = pkg.version.trim();
          let msg = process.env.COMMIT_MSG || '';
          if (!msg || msg === 'null') {
            try { msg = cp.execSync('git log -1 --pretty=%B').toString().trim(); } catch {}
          }
          let bump = 'build';
          const m = current.split('.').map(n=>parseInt(n,10)||0);
          if (/^(feat|feature)(\(|:)/.test(msg)) { m[1]+=1; m[2]=0; bump='minor'; }
          else if (/^(fix|bugfix)(\(|:)/.test(msg)) { m[2]+=1; bump='patch'; }
          const next = bump==='build' ? current : `${m[0]}.${m[1]}.${m[2]}`;
          fs.appendFileSync(process.env.GITHUB_OUTPUT, `version=${next}\n`);
          fs.appendFileSync(process.env.GITHUB_OUTPUT, `bump_type=${bump}\n`);
          fs.appendFileSync(process.env.GITHUB_OUTPUT, `major=${m[0]}\nminor=${m[1]}\npatch=${m[2]}\n`);
          console.log(`Current: ${current} -> Next: ${next} (${bump})`);
          NODE

      - name: Apply version bump (update package.json)
        if: steps.version_bump.outputs.bump_type != 'build'
        run: |
          NEW_VERSION=${{ steps.version_bump.outputs.version }}
          node -e "const fs=require('fs'); const p='package.json'; const pkg=JSON.parse(fs.readFileSync(p,'utf8')); pkg.version='${NEW_VERSION}'; fs.writeFileSync(p, JSON.stringify(pkg,null,2)+'\n');"
          echo "‚úÖ package.json set to ${NEW_VERSION}"

      - name: Calculate version code for Android
        id: version_code
        run: |
          VERSION=$(node -p "require('./package.json').version")
          # Calculate version code: maj*10000 + min*100 + pat
          # Example: 0.8.1 ‚Üí 0*10000 + 8*100 + 1 = 801
          VERSION_CODE=$(node -e "
            const v = '$VERSION'.split('.').map(n => parseInt(n, 10) || 0);
            const code = v[0] * 10000 + v[1] * 100 + v[2];
            console.log(code);
          ")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "üì± Version: $VERSION ‚Üí Version Code: $VERSION_CODE"

      - name: Expo prebuild (propagate version to native)
        run: |
          echo "Running Expo prebuild with version code: ${{ steps.version_code.outputs.version_code }}"
          npx expo prebuild --platform android --no-install --clear || echo "Expo prebuild failed, continuing..."
          echo "Expo prebuild completed"
        env:
          ANDROID_VERSION_CODE: ${{ steps.version_code.outputs.version_code }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
          # Use pre-installed Java if available to avoid download
          check-latest: false

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: '11076708'
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: false
          # Only install essential components for APK building (no emulator)
          packages: 'platforms;android-36 build-tools;36.0.0 platform-tools'

      - name: Setup Gradle (build cache & config cache)
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-disabled: true
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          add-job-summary: never
        continue-on-error: true

      - name: Cache Metro bundler
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: |
            android/app/build/generated/assets
            android/app/build/intermediates/sourcemaps
            /tmp/metro-*
            node_modules/.cache
          key: ${{ runner.os }}-metro-${{ hashFiles('package.json', 'yarn.lock', 'app/**', 'components/**') }}
          restore-keys: |
            ${{ runner.os }}-metro-
            ${{ runner.os }}-node-

      - name: Verify Android project structure
        run: |
          echo "Checking Android project structure..."
          echo "Android directory:"
          ls -la android/ || echo "android/ directory not found"
          echo "Android gradlew:"
          ls -la android/gradlew || echo "android/gradlew not found"
          echo "Android app directory:"
          ls -la android/app/ || echo "android/app/ directory not found"
          echo "Android project structure check completed"

      - name: Make Gradle wrapper executable
        run: chmod +x android/gradlew

      - name: Build Android APK (with versioned code)
        run: |
          cd android
          ./gradlew assembleRelease \
            --no-daemon \
            --stacktrace \
            -x lint \
            -x test \
            -PreactNativeArchitectures=arm64-v8a
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          APP_NAME: 'Safarnak'
          APP_SCHEME: 'safarnak'
          GRAPHQL_URL: 'https://safarnak.mohet.ir/graphql'
          ANDROID_VERSION_CODE: ${{ steps.version_code.outputs.version_code }}
          REACT_NATIVE_ANDROID_ARCHITECTURES: arm64-v8a

      - name: List APK files
        working-directory: android/app/build/outputs/apk/release
        run: |
          echo "=== Generated APK files ==="
          ls -lh *.apk || echo "No APK files found"
          echo ""
          echo "=== APK sizes ==="
          du -h *.apk 2>/dev/null || echo "No APK files to measure"
          echo ""
          echo "=== Checking APK existence ==="
          if [ ! -f *.apk ]; then
            echo "‚ùå No APK files found in release directory!"
            echo "Contents of release directory:"
            ls -la
            exit 1
          else
            echo "‚úÖ APK files found successfully"
          fi

      - name: Read version info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          # Calculate version code: maj*10000 + min*100 + pat
          # Example: 0.8.1 ‚Üí 0*10000 + 8*100 + 1 = 801
          VERSION_CODE=$(node -e "
            const v = '$VERSION'.split('.').map(n => parseInt(n, 10) || 0);
            const code = v[0] * 10000 + v[1] * 100 + v[2];
            console.log(code);
          ")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "major=$(echo $VERSION | cut -d. -f1)" >> $GITHUB_OUTPUT
          echo "minor=$(echo $VERSION | cut -d. -f2)" >> $GITHUB_OUTPUT
          echo "patch=$(echo $VERSION | cut -d. -f3)" >> $GITHUB_OUTPUT
          echo "bump_type=${{ steps.version_bump.outputs.bump_type }}" >> $GITHUB_OUTPUT
          echo "stage=$(node -e "
            const [major, minor] = '$VERSION'.split('.').map(Number);
            if (major === 0) {
              if (minor < 8) console.log('alpha');
              else if (minor < 9) console.log('beta');
              else console.log('beta');
            } else {
              console.log('stable');
            }
          ")" >> $GITHUB_OUTPUT
          echo "üì± App Version: $VERSION ($(echo $VERSION | cut -d. -f1).$(echo $VERSION | cut -d. -f2).$(echo $VERSION | cut -d. -f3))"

      - name: Rename APK with descriptive name
        run: |
          cd android/app/build/outputs/apk/release
          echo "=== Renaming APK file ==="
          echo "Current directory contents:"
          ls -la
          
          # Find the APK file
          APK_FILE=$(ls *.apk 2>/dev/null | head -n 1)
          if [ -z "$APK_FILE" ]; then
            echo "‚ùå No APK file found in release directory!"
            echo "Available files:"
            ls -la
            exit 1
          fi
          
          echo "Found APK file: $APK_FILE"
          
          # Create descriptive name: AppName-Version-Build.apk
          NEW_NAME="Safarnak-v${{ steps.version_code.outputs.version }}-build${{ github.run_number }}.apk"
          echo "Renaming to: $NEW_NAME"
          
          # Copy the file with new name
          cp "$APK_FILE" "$NEW_NAME"
          
          if [ -f "$NEW_NAME" ]; then
            echo "‚úÖ Successfully renamed APK: $APK_FILE -> $NEW_NAME"
            echo "New file details:"
            ls -lh "$NEW_NAME"
          else
            echo "‚ùå Failed to rename APK file!"
            exit 1
          fi

      - name: Verify APK file before upload
        run: |
          APK_PATH="android/app/build/outputs/apk/release/Safarnak-v${{ steps.version_code.outputs.version }}-build${{ github.run_number }}.apk"
          echo "Checking APK file: $APK_PATH"
          
          if [ -f "$APK_PATH" ]; then
            echo "‚úÖ APK file exists and ready for upload"
            echo "File size: $(du -h "$APK_PATH" | cut -f1)"
            echo "File permissions: $(ls -l "$APK_PATH")"
          else
            echo "‚ùå APK file not found at expected path: $APK_PATH"
            echo "Available files in release directory:"
            ls -la android/app/build/outputs/apk/release/
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: safarnak-android-v${{ steps.version_code.outputs.version }}-build${{ github.run_number }}
          path: android/app/build/outputs/apk/release/Safarnak-v${{ steps.version_code.outputs.version }}-build${{ github.run_number }}.apk
          retention-days: 30
          compression-level: 0
          
      - name: Generate commit list
        id: commits
        run: |
          # Fetch all tags to ensure we have the latest releases
          git fetch --tags --force 2>/dev/null || true
          
          # Get the latest successful release tag (matching pattern vX.Y.Z-buildN)
          LAST_TAG=$(git tag --sort=-creatordate | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+-build[0-9]+$" | head -n 1 || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # No previous release tag found, show last 50 commits
            echo "‚ö†Ô∏è No previous release tag found, showing last 50 commits"
            COMMITS=$(git log --oneline --no-decorate --format="- %s (%h)" -50)
          else
            # Show ALL commits between last successful release and current HEAD
            # Exclude automatic version bump commits to keep the list clean
            echo "üìã Finding commits since last successful release: $LAST_TAG"
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --no-decorate --format="- %s (%h)" | grep -v "chore: bump version" || git log ${LAST_TAG}..HEAD --oneline --no-decorate --format="- %s (%h)")
            
            if [ -z "$COMMITS" ]; then
              COMMITS="- No new commits since last release (this is likely a rebuild)"
            fi
          fi
          
          echo "‚úÖ Found commits for release notes:"
          echo "$COMMITS" | head -20
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version bump if changed
        if: steps.version_bump.outputs.bump_type != 'build'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add package.json app.config.js
          git commit -m "chore: bump version to ${{ steps.version_code.outputs.version }} [skip ci]" || echo "No changes to commit"
          git push origin HEAD || echo "Push failed or unnecessary"

      - name: Create GitHub Release with APK
        if: steps.version_bump.outputs.bump_type != 'build'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version_code.outputs.version }}-build${{ github.run_number }}
          name: Safarnak v${{ steps.version_code.outputs.version }} build ${{ github.run_number }}
          body: |
            ## üöÄ Safarnak v${{ steps.version_code.outputs.version }}

            ### üìã Build Info
            - Version: ${{ steps.version_code.outputs.version }}
            - Version Code: ${{ steps.version_code.outputs.version_code }}
            - Build: #${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Date: ${{ github.event.head_commit.timestamp }}

            ### üìù Changes in This Build
            ${{ github.event.head_commit.message }}

            ### üìö Commits Since Last Release
            ${{ steps.commits.outputs.commits }}

            ### üì± Installation
            1. Download the APK file below
            2. Enable "Install from unknown sources" on your device  
            3. Install the APK

            ---
            See [README](https://github.com/mehotkhan/safarnak.app/blob/master/README.md) for full documentation.
          files: android/app/build/outputs/apk/release/Safarnak-v${{ steps.version_code.outputs.version }}-build${{ github.run_number }}.apk
          draft: false
          prerelease: false
          fail_on_unmatched_files: true

      - name: Cleanup Gradle cache
        if: always()
        working-directory: android
        run: |
          ./gradlew --stop || true
          rm -rf ~/.gradle/caches/transforms-* || true
          rm -rf ~/.gradle/caches/*/generated-gradle-jars || true
          find ~/.gradle/caches/ -name "*.lock" -type f -delete || true
