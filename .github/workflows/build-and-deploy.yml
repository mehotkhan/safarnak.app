name: Build Android APK

on:
  push:
    branches: [master, main]
    paths:
      - 'app/**'
      - 'components/**'
      - 'android/**'
      - 'package.json'
      - 'yarn.lock'
      - '.github/workflows/build-and-deploy.yml'
      - 'graphql/**'
      - 'drizzle/**'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  GRADLE_OPTS: '-Dorg.gradle.daemon=true -Dorg.gradle.workers.max=4 -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Dorg.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dkotlin.compiler.execution.strategy=in-process'
  NODE_ENV: 'production'
  # Environment variables for the app
  GRAPHQL_URL: 'https://safarnak.mohet.ir/graphql'
  APP_NAME: 'ÿ≥ŸÇÿ±ŸÜÿß⁄©'
  APP_SCHEME: 'safarnak'
  BUNDLE_IDENTIFIER: 'ir.mohet.safarnak'

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    timeout-minutes: 60
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile --prefer-offline --no-progress --network-timeout 100000
          echo "Dependencies installed successfully"

      - name: Verify GraphQL Codegen installation
        run: |
          echo "Checking GraphQL Codegen installation..."
          npx graphql-codegen --version || echo "GraphQL Codegen not found"
          echo "Checking codegen.yml..."
          ls -la codegen.yml || echo "codegen.yml not found"

      - name: Generate GraphQL types and hooks
        run: |
          echo "Generating GraphQL types and hooks..."
          yarn codegen || echo "GraphQL codegen failed, continuing..."
          echo "GraphQL codegen completed"

      - name: Verify Drizzle Kit installation
        run: |
          echo "Checking Drizzle Kit installation..."
          npx drizzle-kit --version || echo "Drizzle Kit not found"
          echo "Checking drizzle.config.ts..."
          ls -la drizzle.config.ts || echo "drizzle.config.ts not found"

      - name: Generate database migrations
        run: |
          echo "Generating database migrations..."
          yarn db:generate || echo "No new migrations needed"
          echo "Database migration generation completed"

      - name: Verify generated files
        run: |
          echo "Checking generated files..."
          echo "API types file:"
          ls -la api/types.ts || echo "api/types.ts not found"
          echo "API hooks file:"
          ls -la api/hooks.ts || echo "api/hooks.ts not found"
          echo "GraphQL schema declarations:"
          ls -la graphql/generated/schema.d.ts || echo "graphql/generated/schema.d.ts not found"
          echo "Generated files check completed"

      - name: Expo prebuild (only when native changes)
        if: |
          contains(toJson(github.event.commits.*.modified), 'app.config.js') ||
          contains(toJson(github.event.commits.*.modified), 'android/') ||
          contains(toJson(github.event.commits.*.modified), 'package.json')
        run: |
          echo "Running Expo prebuild..."
          npx expo prebuild --platform android --no-install --clear || echo "Expo prebuild failed, continuing..."
          echo "Expo prebuild completed"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
          # Use pre-installed Java if available to avoid download
          check-latest: false

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: '11076708'
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: false
          # Only install essential components for APK building (no emulator)
          packages: 'platforms;android-36 build-tools;36.0.0 platform-tools'

      - name: Setup Gradle (build cache & config cache)
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-disabled: true
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          add-job-summary: never
        continue-on-error: true

      - name: Cache Metro bundler
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: |
            android/app/build/generated/assets
            android/app/build/intermediates/sourcemaps
            /tmp/metro-*
            node_modules/.cache
          key: ${{ runner.os }}-metro-${{ hashFiles('package.json', 'yarn.lock', 'app/**', 'components/**') }}
          restore-keys: |
            ${{ runner.os }}-metro-
            ${{ runner.os }}-node-

      - name: Verify Android project structure
        run: |
          echo "Checking Android project structure..."
          echo "Android directory:"
          ls -la android/ || echo "android/ directory not found"
          echo "Android gradlew:"
          ls -la android/gradlew || echo "android/gradlew not found"
          echo "Android app directory:"
          ls -la android/app/ || echo "android/app/ directory not found"
          echo "Android project structure check completed"

      - name: Make Gradle wrapper executable
        run: chmod +x android/gradlew

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleRelease \
            --no-daemon \
            --stacktrace \
            -x lint \
            -x test
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          APP_NAME: 'Safarnak'
          APP_SCHEME: 'safarnak'
          GRAPHQL_URL: 'https://safarnak.mohet.ir/graphql'

      - name: List APK files
        working-directory: android/app/build/outputs/apk/release
        run: |
          echo "=== Generated APK files ==="
          ls -lh *.apk || echo "No APK files found"
          echo ""
          echo "=== APK sizes ==="
          du -h *.apk 2>/dev/null || echo "No APK files to measure"
          echo ""
          echo "=== Checking APK existence ==="
          if [ ! -f *.apk ]; then
            echo "‚ùå No APK files found in release directory!"
            echo "Contents of release directory:"
            ls -la
            exit 1
          else
            echo "‚úÖ APK files found successfully"
          fi

      - name: Get App Version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$(echo $VERSION | cut -d. -f1)" >> $GITHUB_OUTPUT
          echo "minor=$(echo $VERSION | cut -d. -f2)" >> $GITHUB_OUTPUT
          echo "patch=$(echo $VERSION | cut -d. -f3)" >> $GITHUB_OUTPUT
          echo "stage=$(node -e "
            const [major, minor] = '$VERSION'.split('.').map(Number);
            if (major === 0) {
              if (minor < 8) console.log('alpha');
              else if (minor < 9) console.log('beta');
              else console.log('beta');
            } else {
              console.log('stable');
            }
          ")" >> $GITHUB_OUTPUT
          echo "üì± App Version: $VERSION ($(echo $VERSION | cut -d. -f1).$(echo $VERSION | cut -d. -f2).$(echo $VERSION | cut -d. -f3))"

      - name: Rename APK with descriptive name
        run: |
          cd android/app/build/outputs/apk/release
          echo "=== Renaming APK file ==="
          echo "Current directory contents:"
          ls -la
          
          # Find the APK file
          APK_FILE=$(ls *.apk 2>/dev/null | head -n 1)
          if [ -z "$APK_FILE" ]; then
            echo "‚ùå No APK file found in release directory!"
            echo "Available files:"
            ls -la
            exit 1
          fi
          
          echo "Found APK file: $APK_FILE"
          
          # Create descriptive name: AppName-Version-Build.apk
          NEW_NAME="Safarnak-v${{ steps.version.outputs.version }}-build${{ github.run_number }}.apk"
          echo "Renaming to: $NEW_NAME"
          
          # Copy the file with new name
          cp "$APK_FILE" "$NEW_NAME"
          
          if [ -f "$NEW_NAME" ]; then
            echo "‚úÖ Successfully renamed APK: $APK_FILE -> $NEW_NAME"
            echo "New file details:"
            ls -lh "$NEW_NAME"
          else
            echo "‚ùå Failed to rename APK file!"
            exit 1
          fi

      - name: Verify APK file before upload
        run: |
          APK_PATH="android/app/build/outputs/apk/release/Safarnak-v${{ steps.version.outputs.version }}-build${{ github.run_number }}.apk"
          echo "Checking APK file: $APK_PATH"
          
          if [ -f "$APK_PATH" ]; then
            echo "‚úÖ APK file exists and ready for upload"
            echo "File size: $(du -h "$APK_PATH" | cut -f1)"
            echo "File permissions: $(ls -l "$APK_PATH")"
          else
            echo "‚ùå APK file not found at expected path: $APK_PATH"
            echo "Available files in release directory:"
            ls -la android/app/build/outputs/apk/release/
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: safarnak-android-v${{ steps.version.outputs.version }}-build${{ github.run_number }}
          path: android/app/build/outputs/apk/release/Safarnak-v${{ steps.version.outputs.version }}-build${{ github.run_number }}.apk
          retention-days: 30
          compression-level: 0

      - name: Create GitHub Release with APK
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Safarnak Android v${{ steps.version.outputs.version }} (${{ steps.version.outputs.stage }})
          body: |
            ## üöÄ Safarnak Android APK - v${{ steps.version.outputs.version }}

            ### üìã Version Information
            - **Version**: ${{ steps.version.outputs.version }}
            - **Stage**: ${{ steps.version.outputs.stage }}
            - **Build**: #${{ github.run_number }}
            - **Commit**: ${{ github.sha }}
            - **Branch**: ${{ github.ref_name }}
            - **Built**: ${{ github.event.head_commit.timestamp }}

            ### üìù Latest Changes
            **Commit Message**: ${{ github.event.head_commit.message }}
            **Author**: ${{ github.event.head_commit.author.name }}

            ### üéØ Version Progress
            - **Current**: ${{ steps.version.outputs.version }} (${{ steps.version.outputs.stage }})
            - **Target Stable**: 1.0.0
            - **Progress**: ${{ steps.version.outputs.stage }} stage

            ### üì± Installation
            1. Download the APK file below
            2. Enable "Install from unknown sources" in Android settings
            3. Install the APK

            ### ‚ú® Features
            - **üåç Offline-First**: Works seamlessly without internet
            - **üì° GraphQL API**: Type-safe client-server communication
            - **üåê Bilingual**: English and Persian (Farsi) support
            - **üåô Dark Mode**: System preference and manual toggle
            - **üó∫Ô∏è Interactive Maps**: Leaflet-based with multiple layers
            - **üí¨ Real-Time**: Live messaging with GraphQL subscriptions
            - **üîê Secure**: PBKDF2 password hashing and token-based auth
            - **üì± Cross-Platform**: iOS, Android, and Web support

            ### üèóÔ∏è Technical Stack
            - **Frontend**: Expo React Native 0.81.5
            - **Backend**: Cloudflare Workers with GraphQL
            - **Database**: Cloudflare D1 (SQLite) with Drizzle ORM
            - **State**: Redux Toolkit with persistence
            - **Codegen**: GraphQL Codegen for type safety

            ### üîÑ Version History
            | Version | Stage | Description |
            |---------|-------|-------------|
            | 0.5.0 | Alpha | Initial development version |
            | 0.6.0 | Alpha | Core features implementation |
            | 0.7.0 | Alpha | UI/UX improvements |
            | 0.8.0 | Beta | Feature completion |
            | 0.9.0 | Beta | Testing and bug fixes |
            | 1.0.0 | Stable | First stable release |

            ### üêõ Bug Reports
            If you encounter any issues, please report them on [GitHub Issues](https://github.com/mehotkhan/safarnak.app/issues).

            ### ü§ù Contributing
            We welcome contributions! See our [Contributing Guide](https://github.com/mehotkhan/safarnak.app/blob/master/CONTRIBUTING.md) for details.

            ---

            **Built with ‚ù§Ô∏è using Expo, Cloudflare Workers, and GraphQL Codegen**
          files: android/app/build/outputs/apk/release/Safarnak-v${{ steps.version.outputs.version }}-build${{ github.run_number }}.apk
          draft: false
          prerelease: ${{ steps.version.outputs.stage != 'stable' }}
          fail_on_unmatched_files: true

      - name: Cleanup Gradle cache
        if: always()
        working-directory: android
        run: |
          ./gradlew --stop || true
          rm -rf ~/.gradle/caches/transforms-* || true
          rm -rf ~/.gradle/caches/*/generated-gradle-jars || true
          find ~/.gradle/caches/ -name "*.lock" -type f -delete || true
