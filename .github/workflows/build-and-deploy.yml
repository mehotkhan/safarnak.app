name: Build Android APK

on:
  push:
    branches: [master, main]
    paths:
      - 'app/**'
      - 'components/**'
      - 'android/**'
      - 'package.json'
      - 'yarn.lock'
      - '.github/workflows/build-and-deploy.yml'
      - 'graphql/**'
      - 'drizzle/**'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=4 -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Dorg.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dkotlin.compiler.execution.strategy=in-process'
  NODE_ENV: 'production'
  # Environment variables for the app
  GRAPHQL_URL: 'https://safarnak.mohet.ir/graphql'
  APP_NAME: 'سقرناک'
  APP_SCHEME: 'safarnak'
  BUNDLE_IDENTIFIER: 'ir.mohet.safarnak'

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-deps-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies (workspaces)
        run: |
          yarn install --frozen-lockfile --network-timeout 100000

      - name: Setup Expo (npx)
        run: |
          npx --yes expo --version
      - name: Expo prebuild (only when native changes)
        if: |
          contains(toJson(github.event.commits.*.modified), 'app.config.js') ||
          contains(toJson(github.event.commits.*.modified), 'android/')
        run: |
          npx expo prebuild --platform android --no-install

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: '11076708'

      - name: Cache Gradle (wrapper and caches)
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle*', 'android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Metro bundler
        uses: actions/cache@v4
        with:
          path: |
            android/app/build/generated/assets
            android/app/build/intermediates/sourcemaps
            /tmp/metro-*
          key: ${{ runner.os }}-metro-${{ hashFiles('app/**', 'components/**') }}
          restore-keys: |
            ${{ runner.os }}-metro-

      - name: Make Gradle wrapper executable
        run: chmod +x android/gradlew

      - name: Check Gradle version
        run: |
          cd android
          ./gradlew --version

      - name: Clean Android build
        run: |
          cd android
          ./gradlew clean

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleRelease \
            --no-daemon \
            --max-workers=4 \
            --build-cache \
            --parallel \
            --configure-on-demand \
            --stacktrace \
            -Pandroid.enablePngCrunchInReleaseBuilds=false \
            -Pandroid.enableMinifyInReleaseBuilds=false \
            -Pandroid.enableShrinkResourcesInReleaseBuilds=false \
            -x lint \
            -x lintVitalAnalyzeRelease
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          APP_NAME: 'Safarnak'
          APP_SCHEME: 'safarnak'
          GRAPHQL_URL: 'https://safarnak.mohet.ir/graphql'

      - name: List APK files
        working-directory: android/app/build/outputs/apk/release
        run: |
          echo "=== Generated APK files ==="
          ls -lh *.apk || echo "No APK files found"
          echo ""
          echo "=== APK sizes ==="
          du -h *.apk 2>/dev/null || echo "No APK files to measure"

      - name: Create GitHub Release
        if: github.event_name != 'release'
        id: create_release
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${context.runNumber}`,
              name: `Safarnak Android v${context.runNumber}`,
              body: `## Safarnak Android APK
              
              **Build Number**: ${context.runNumber}
              **Commit**: ${context.sha}
              **Branch**: ${context.ref.replace('refs/heads/', '')}
              
              ### Download
              Download the APK file below to install on your Android device.
              
              ### Installation
              1. Download the APK file
              2. Enable "Install from unknown sources" in Android settings
              3. Install the APK
              
              ### Features
              - GraphQL API integration
              - Offline-first architecture
              - Persian/English language support`,
              draft: false,
              prerelease: false
            });

            return release.data.upload_url;

      - name: Find and rename APK
        id: find_apk
        working-directory: android/app/build/outputs/apk/release
        run: |
          # Find the main APK file (universal or first one found)
          APK_FILE=$(ls app-universal-release.apk 2>/dev/null || ls app-release.apk 2>/dev/null || ls *.apk | head -n 1)
          if [ -n "$APK_FILE" ]; then
            NEW_NAME="safarnak-android-v${{ github.run_number }}.apk"
            cp "$APK_FILE" "$NEW_NAME"
            echo "apk_path=./android/app/build/outputs/apk/release/$NEW_NAME" >> $GITHUB_OUTPUT
            echo "apk_name=$NEW_NAME" >> $GITHUB_OUTPUT
            echo "Found and renamed: $APK_FILE -> $NEW_NAME"
            ls -lh "$NEW_NAME"
          else
            echo "No APK file found!"
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ github.run_number }}
          path: ${{ steps.find_apk.outputs.apk_path }}
          retention-days: 30
          compression-level: 0

      - name: Upload APK to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.result }}
          asset_path: ${{ steps.find_apk.outputs.apk_path }}
          asset_name: ${{ steps.find_apk.outputs.apk_name }}
          asset_content_type: application/vnd.android.package-archive

      - name: Cleanup Gradle cache
        if: always()
        working-directory: android
        run: |
          ./gradlew --stop || true
          rm -rf ~/.gradle/caches/transforms-* || true
          rm -rf ~/.gradle/caches/*/generated-gradle-jars || true
          find ~/.gradle/caches/ -name "*.lock" -type f -delete || true
