name: Database Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to migrate'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - development
      dry_run:
        description: 'Dry run (show what would be migrated)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  YARN_VERSION: '1.22.22'

jobs:
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            worker/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-migrate-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-migrate-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup Wrangler CLI
        run: |
          cd worker
          npm install -g wrangler@latest

      - name: Configure Cloudflare
        run: |
          cd worker
          wrangler auth login --api-token
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Generate migrations
        run: |
          echo "Generating database migrations..."
          yarn db:generate:worker

      - name: Check for pending migrations
        id: check-migrations
        run: |
          cd worker
          if [ -d "../drizzle/migrations/worker" ] && [ "$(ls -A ../drizzle/migrations/worker/*.sql 2>/dev/null)" ]; then
            echo "has_migrations=true" >> $GITHUB_OUTPUT
            echo "Found pending migrations:"
            ls -la ../drizzle/migrations/worker/*.sql
          else
            echo "has_migrations=false" >> $GITHUB_OUTPUT
            echo "No pending migrations found"
          fi

      - name: Run migrations (Production)
        if: steps.check-migrations.outputs.has_migrations == 'true' && github.event.inputs.environment == 'production' && github.event.inputs.dry_run != 'true'
        run: |
          cd worker
          echo "Running production database migrations..."
          yarn db:migrate:prod
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Run migrations (Development)
        if: steps.check-migrations.outputs.has_migrations == 'true' && github.event.inputs.environment == 'development' && github.event.inputs.dry_run != 'true'
        run: |
          cd worker
          echo "Running development database migrations..."
          yarn db:migrate
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Dry run migrations
        if: steps.check-migrations.outputs.has_migrations == 'true' && github.event.inputs.dry_run == 'true'
        run: |
          cd worker
          echo "Dry run - showing what would be migrated:"
          echo "Migration files:"
          ls -la ../drizzle/migrations/worker/*.sql
          echo ""
          echo "To apply these migrations, run the workflow again with dry_run=false"

      - name: Migration Summary
        run: |
          echo "## Database Migration Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Migrations Found:** ${{ steps.check-migrations.outputs.has_migrations }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check-migrations.outputs.has_migrations }}" = "true" ]; then
            if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
              echo "✅ Migration dry run completed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ Migrations applied successfully" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ No pending migrations found" >> $GITHUB_STEP_SUMMARY
          fi
