name: Android Build and Release

on:
  push:
    branches:
      - master
      - main
      - develop
    paths:
      - 'client/**'
      - 'graphql/**'
      - 'worker/drizzle/**'
      - '.github/workflows/android-build.yml'
  pull_request:
    branches:
      - master
      - main
      - develop
    paths:
      - 'client/**'
      - 'graphql/**'
      - 'worker/drizzle/**'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.14.3'

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      # ============================================
      # 1. CHECKOUT CODE
      # ============================================
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for better caching

      # ============================================
      # 2. SETUP ENVIRONMENT
      # ============================================
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: |
            yarn.lock
            client/yarn.lock

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      # ============================================
      # 3. DEPENDENCY CACHING
      # ============================================
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules
            client/node_modules
            worker/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            client/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Metro bundler
        uses: actions/cache@v4
        with:
          path: |
            client/android/app/build/generated/assets
            client/android/app/build/intermediates/sourcemaps
            /tmp/metro-*
          key: ${{ runner.os }}-metro-${{ hashFiles('client/app/**', 'client/components/**') }}
          restore-keys: |
            ${{ runner.os }}-metro-

      - name: Cache Android build cache
        uses: actions/cache@v4
        with:
          path: |
            client/android/app/build/intermediates
            client/android/app/build/generated
          key: ${{ runner.os }}-android-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-build-

      # ============================================
      # 4. INSTALL DEPENDENCIES
      # ============================================
      - name: Install root dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Install client dependencies
        working-directory: client
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --prefer-offline

      # ============================================
      # 5. VALIDATE GRADLE WRAPPER
      # ============================================
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2

      # ============================================
      # 6. SETUP GRADLE
      # ============================================
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          cache-read-only: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main' }}
          gradle-home-cache-cleanup: true

      # ============================================
      # 7. GENERATE AUTOLINKING
      # ============================================
      - name: Generate autolinking
        working-directory: client/android
        run: ./gradlew generateAutolinkingPackageList --no-daemon --build-cache --parallel

      # ============================================
      # 8. BUILD APK
      # ============================================
      - name: Build Release APK
        working-directory: client/android
        env:
          NODE_ENV: production
        run: |
          ./gradlew assembleRelease \
            --no-daemon \
            --build-cache \
            --parallel \
            --max-workers=4 \
            --configure-on-demand \
            -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError" \
            -Pandroid.enableMinifyInReleaseBuilds=false \
            -Pandroid.enableShrinkResourcesInReleaseBuilds=false

      # ============================================
      # 9. VERIFY BUILD OUTPUT
      # ============================================
      - name: List APK files
        working-directory: client/android/app/build/outputs/apk/release
        run: |
          echo "=== Generated APK files ==="
          ls -lh *.apk || echo "No APK files found"
          echo ""
          echo "=== APK sizes ==="
          du -h *.apk 2>/dev/null || echo "No APK files to measure"

      # ============================================
      # 10. RENAME APK
      # ============================================
      - name: Rename APK
        working-directory: client/android/app/build/outputs/apk/release
        run: |
          APK_FILE=$(ls app-universal-release.apk 2>/dev/null || ls app-release.apk 2>/dev/null || ls *.apk | head -n 1)
          if [ -n "$APK_FILE" ]; then
            VERSION=$(grep -oP 'versionName "\K[^"]+' ../../../../../../app.json || echo "1.0.0")
            NEW_NAME="safarnak-v${VERSION}-${GITHUB_SHA::7}.apk"
            mv "$APK_FILE" "$NEW_NAME"
            echo "APK_NAME=$NEW_NAME" >> $GITHUB_ENV
            echo "Renamed to: $NEW_NAME"
          else
            echo "No APK file found to rename"
            exit 1
          fi

      # ============================================
      # 11. UPLOAD ARTIFACT
      # ============================================
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ github.sha }}
          path: client/android/app/build/outputs/apk/release/*.apk
          retention-days: 30
          compression-level: 0  # APKs are already compressed

      # ============================================
      # 12. CREATE RELEASE (on tags)
      # ============================================
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: client/android/app/build/outputs/apk/release/*.apk
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ============================================
      # 13. CLEANUP
      # ============================================
      - name: Cleanup Gradle cache
        if: always()
        working-directory: client/android
        run: |
          ./gradlew --stop
          rm -rf ~/.gradle/caches/transforms-*
          rm -rf ~/.gradle/caches/*/generated-gradle-jars
          find ~/.gradle/caches/ -name "*.lock" -type f -delete

  # ============================================
  # LINT AND TEST JOB (runs in parallel)
  # ============================================
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        working-directory: client
        run: yarn install --frozen-lockfile

      - name: Run TypeScript check
        working-directory: client
        run: yarn tsc --noEmit

      - name: Run linter (if configured)
        working-directory: client
        run: yarn lint || echo "No lint script configured"
        continue-on-error: true

  # ============================================
  # BUILD SUMMARY
  # ============================================
  summary:
    name: Build Summary
    needs: [build-android, lint-and-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Status**: ${{ needs.build-android.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Lint Status**: ${{ needs.lint-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build-android.result }}" == "success" ]; then
            echo "✅ Android build completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Android build failed!" >> $GITHUB_STEP_SUMMARY
          fi

