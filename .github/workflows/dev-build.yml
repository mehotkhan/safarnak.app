name: Development Build

on:
  push:
    branches: [develop, dev]
  pull_request:
    branches: [develop, dev]

env:
  NODE_VERSION: '20'
  YARN_VERSION: '1.22.22'

jobs:
  # Quick Android build for development
  build-android-dev:
    name: Build Android APK (Dev)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            client/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-dev-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-dev-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup Expo CLI
        run: |
          npm install -g @expo/cli@latest

      - name: Setup EAS CLI
        run: |
          npm install -g eas-cli@latest

      - name: Configure EAS
        run: |
          eas login --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Build Android APK (Development)
        run: |
          cd client
          eas build --platform android --profile preview3 --non-interactive --no-wait
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Wait for build completion
        run: |
          cd client
          eas build:list --platform android --limit 1 --json > build-info.json
          BUILD_ID=$(cat build-info.json | jq -r '.[0].id')
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          
          # Wait for build to complete (shorter timeout for dev builds)
          timeout=1800  # 30 minutes
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            eas build:view $BUILD_ID --json > build-status.json
            STATUS=$(cat build-status.json | jq -r '.status')
            echo "Build status: $STATUS"
            
            if [ "$STATUS" = "finished" ]; then
              break
            elif [ "$STATUS" = "errored" ] || [ "$STATUS" = "canceled" ]; then
              echo "Build failed with status: $STATUS"
              exit 1
            fi
            
            sleep 30
            elapsed=$((elapsed + 30))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "Build timed out after $timeout seconds"
            exit 1
          fi

      - name: Download APK
        run: |
          cd client
          eas build:download $BUILD_ID --output ./build-dev.apk

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-dev
          path: client/build-dev.apk
          retention-days: 7

  # Quick worker deployment for development
  deploy-worker-dev:
    name: Deploy Worker (Dev)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            worker/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-worker-dev-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-worker-dev-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup Wrangler CLI
        run: |
          cd worker
          npm install -g wrangler@latest

      - name: Configure Cloudflare
        run: |
          cd worker
          wrangler auth login --api-token
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Deploy Worker (Development)
        run: |
          cd worker
          wrangler deploy --env development
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  # Quick type checking
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            client/node_modules
            worker/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-typecheck-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-typecheck-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run TypeScript checks
        run: |
          echo "Checking client types..."
          cd client && yarn tsc --noEmit
          echo "Checking worker types..."
          cd ../worker && yarn tsc --noEmit
          echo "All type checks passed! âœ…"
